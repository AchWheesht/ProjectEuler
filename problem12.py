# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?


import prime_generator_generator
import prime_factor_module
import math

def generate_triangle_numbers():
    count = 1
    current_number = 1
    while True:
        yield current_number
        count += 1
        current_number += count

def find_low_factors(number):
    sqrt_number = int(math.sqrt(number))
    factor_list = []
    for i in range(1, sqrt_number + 1):
        if number % i == 0:
            factor_list.append(i)
    if len(factor_list) == 250:
        if sqrt_number ** 2 == number:
            return (False, len(factor_list))
        else:
            return (True, None)
    if len(factor_list) > 250:
        return (True, None)
    else:
        return (False, len(factor_list))

def find_answer():
    while True:
        number = next(triangle_generator)
        hold = find_low_factors(number)
        if hold[0]:
            return number
        else:
            print("Not: ", number, " Factors: ", hold[1])

triangle_generator = generate_triangle_numbers()
prime_generator = prime_generator_generator.generate_primes_generator(0)

print(find_answer())
